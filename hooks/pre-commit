#!/bin/sh

# git diff --cached --> All files that are staged for the next commit
# grep -q "WORD" filename --> Suppresses output and checks if word exists in file
# if echo "$STAGED_FILES" | grep -Eq "$BLOCKED_FILES"; then --> If any of the staged file names match the pattern then do




STAGED_FILES=$(git diff --cached --name-only)
BLOCKED_FILES="\.env$|\.log$|\.tmp$|\.bak$"

for file in $STAGED_FILES; do
	echo "Checking: $file"
done

# Cancel commit if no staged files
if [ -z "$STAGED_FILES" ]; then
	echo "Error: Cannot make a commit if no files are staged."
	exit 1
fi

# Cancel commit if any staged files if they contain ...
for file in $STAGED_FILES; do
	if grep -q "TODO" "$file"; then
		echo "Error: Found 'TODO' in $file. Resolve before making a commit."
		exit 1
	fi
done

# Cancel commit if any of the staged files contain a certain file extension
if echo "$STAGED_FILES" | grep -Eq "$BLOCKED_FILES"; then
	echo "Error: Commit blocked due to forbidden file type being staged."
	exit 1
fi

echo "Commit Validated. Commit made."
exit 0









# Task 3: Disallow Certain File Types
# Goal: Prevent committing files with extensions like .log, .tmp, or .bak.
# Helps you practice filtering staged files and using pattern matching.

# Task 4: Enforce Lowercase File Names
# Goal: Block the commit if any staged file contains uppercase letters in the name.
# Introduces basic filename validation and shell string manipulation.

# Task 5: Check for Blank Commit Messages
# Goal: Cancel the commit if the message is empty or just whitespace.
# This is normally a commit-msg hook task, but trying it here helps you understand how hooks interact and work with files passed as arguments.