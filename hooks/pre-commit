#!/bin/sh

STAGED_FILES=$(git diff --cached --name-only)

for file in $STAGED_FILES; do
	echo "Checking: $file"
done

# Cancel commit if no staged files
if [ -z "$STAGED_FILES" ]; then
	echo "Error: Cannot make a commit if no files are staged."
	exit 1
fi





# Task 1: Prevent Commits with Empty Staged Area
# Goal: Cancel the commit if no files are staged.
# Helps reinforce understanding of checking staging status using git diff --cached.


# Task 2: Block Commits with TODO Comments
# Goal: If any staged file contains the word TODO, cancel the commit and print a warning.
# Gets you comfortable reading staged file content and basic string searching.


# Task 3: Disallow Certain File Types
# Goal: Prevent committing files with extensions like .log, .tmp, or .bak.
# Helps you practice filtering staged files and using pattern matching.

# Task 4: Enforce Lowercase File Names
# Goal: Block the commit if any staged file contains uppercase letters in the name.
# Introduces basic filename validation and shell string manipulation.

# Task 5: Check for Blank Commit Messages
# Goal: Cancel the commit if the message is empty or just whitespace.
# This is normally a commit-msg hook task, but trying it here helps you understand how hooks interact and work with files passed as arguments.








# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
